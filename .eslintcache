[{"E:\\group\\pageDraw\\client\\src\\index.js":"1","E:\\group\\pageDraw\\client\\src\\App.js":"2","E:\\group\\pageDraw\\client\\src\\reportWebVitals.js":"3","E:\\group\\pageDraw\\client\\src\\pages\\home\\index.js":"4","E:\\group\\pageDraw\\client\\src\\component\\board.js":"5"},{"size":500,"mtime":1608311716000,"results":"6","hashOfConfig":"7"},{"size":267,"mtime":1608313416000,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1608311716000,"results":"9","hashOfConfig":"7"},{"size":9031,"mtime":1610202597476,"results":"10","hashOfConfig":"7"},{"size":2577,"mtime":1610202765332,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"ewjd68",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"E:\\group\\pageDraw\\client\\src\\index.js",[],["24","25"],"E:\\group\\pageDraw\\client\\src\\App.js",[],"E:\\group\\pageDraw\\client\\src\\reportWebVitals.js",[],"E:\\group\\pageDraw\\client\\src\\pages\\home\\index.js",[],"E:\\group\\pageDraw\\client\\src\\component\\board.js",["26"],"import React, {useState, useRef, useEffect, Component} from 'react';\r\nimport './index.css';\r\n\r\nfunction Pagedraw(props) {\r\n    const canvasRef = useRef(null)\r\n    const contextRef = useRef(null)\r\n    const [isDraw, setIsDraw] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        canvas.width = window.innerWidth * 2;\r\n        canvas.height = window.innerHeight * 2;\r\n        canvas.style.width = `${window.innerWidth}px`;\r\n        canvas.style.height = `${window.innerHeight}px`;\r\n\r\n        const context = canvas.getContext(\"2d\");\r\n        context.lineWidth = `${localStorage.getItem('size')}`;\r\n        context.scale(2, 2);\r\n        contextRef.current = context;\r\n\r\n    }, [])\r\n\r\n\r\n    const startDraw = ({nativeEvent}) => {\r\n        const context = canvasRef.current.getContext(\"2d\");\r\n        const {offsetX, offsetY} = nativeEvent;\r\n\r\n        context.strokeStyle = `${props.text}`;\r\n        context.lineCap = `${props.type}`;\r\n        contextRef.current.beginPath();\r\n        contextRef.current.moveTo(offsetX, offsetY);\r\n\r\n        setIsDraw(true)\r\n    }\r\n\r\n    const endDraw = () => {\r\n        contextRef.current.closePath();\r\n\r\n        setIsDraw(false)\r\n    }\r\n\r\n    const draw = ({nativeEvent}) => {\r\n        const context = canvasRef.current.getContext(\"2d\");\r\n        context.lineWidth = `${props.size}`;\r\n\r\n        const {offsetX, offsetY} = nativeEvent;\r\n        if(isDraw) {\r\n            contextRef.current.lineTo(offsetX, offsetY);\r\n            contextRef.current.stroke();\r\n        }\r\n        return\r\n    }\r\n\r\n    return (\r\n        <div className=\"canvas\">\r\n            <div className=\"mode\">\r\n                <div className=\"btn-mode\" id=\"btn-mode\" onClick={props.modeOn}>\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"modes\">\r\n                  <div className=\"list-modes\" id=\"las-modes1\" onClick={props.textColorDefault1}><i className=\"las la-pen i-modes actived-modes\" id=\"i-modes1\"></i></div>\r\n                  <div className=\"list-modes\" id=\"las-modes2\" onClick={props.textColorDefault2}><i className=\"las la-eraser i-modes\" id=\"i-modes2\"></i></div>\r\n            </div>\r\n            <canvas\r\n            style={{backgroundColor:`${props.bg}`, color: 'red'}}\r\n            onMouseDown={startDraw}\r\n            onMouseUp={endDraw}\r\n            onMouseMove={draw}\r\n            ref={canvasRef}\r\n            />\r\n            <input type=\"number\" className=\"lineWidth\" id=\"lineWidth\" value={props.width} onChange={props.valueChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pagedraw;\r\n",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":1,"column":45,"nodeType":"33","messageId":"34","endLine":1,"endColumn":54},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]